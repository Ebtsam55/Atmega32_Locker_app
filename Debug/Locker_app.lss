
Locker_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000886  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00000886  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000988  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  000010e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010ec  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d9  00000000  00000000  000022cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b2c  00000000  00000000  000028a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000026c  00000000  00000000  000033d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023d  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000070c  00000000  00000000  0000387d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00003f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3e       	cpi	r26, 0xEC	; 236
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac ee       	ldi	r26, 0xEC	; 236
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3e       	cpi	r26, 0xEC	; 236
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 17 03 	call	0x62e	; 0x62e <main>
  8a:	0c 94 41 04 	jmp	0x882	; 0x882 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
	'1','2','3','-',
	'C','0','=','+'
};
void keypad_init(){
	
	CLRBIT(DDRD,2);
  92:	8a 98       	cbi	0x11, 2	; 17
	CLRBIT(DDRD,3);
  94:	8b 98       	cbi	0x11, 3	; 17
	CLRBIT(DDRD,4);
  96:	8c 98       	cbi	0x11, 4	; 17
	CLRBIT(DDRD,5);	
  98:	8d 98       	cbi	0x11, 5	; 17
	//PORTD |= 0b00111100; // internal pull up in case of protues
	SETBIT(DDRB,4);
  9a:	bc 9a       	sbi	0x17, 4	; 23
	SETBIT(DDRB,5);
  9c:	bd 9a       	sbi	0x17, 5	; 23
	SETBIT(DDRB,6);
  9e:	be 9a       	sbi	0x17, 6	; 23
	SETBIT(DDRB,7);
  a0:	bf 9a       	sbi	0x17, 7	; 23
	
	
}
  a2:	08 95       	ret

000000a4 <keypad_read>:

int8_t keypad_read(){
	
	for (uint8_t i=0; i<4 ; i++)
  a4:	e0 e0       	ldi	r30, 0x00	; 0
	{
		PORTB = PORTB & 0b00001111;
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	88 bb       	out	0x18, r24	; 24
		if(i==0) PORTB|=0b11100000;
  ac:	ee 23       	and	r30, r30
  ae:	21 f4       	brne	.+8      	; 0xb8 <keypad_read+0x14>
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	80 6e       	ori	r24, 0xE0	; 224
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	0c c0       	rjmp	.+24     	; 0xd0 <keypad_read+0x2c>
		if(i==1) PORTB|=0b11010000;
  b8:	e1 30       	cpi	r30, 0x01	; 1
  ba:	21 f4       	brne	.+8      	; 0xc4 <keypad_read+0x20>
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	80 6d       	ori	r24, 0xD0	; 208
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	0b c0       	rjmp	.+22     	; 0xda <keypad_read+0x36>
		if(i==2) PORTB|=0b10110000;
  c4:	e2 30       	cpi	r30, 0x02	; 2
  c6:	21 f4       	brne	.+8      	; 0xd0 <keypad_read+0x2c>
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	80 6b       	ori	r24, 0xB0	; 176
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	05 c0       	rjmp	.+10     	; 0xda <keypad_read+0x36>
		if(i==3) PORTB|=0b01110000;
  d0:	e3 30       	cpi	r30, 0x03	; 3
  d2:	19 f4       	brne	.+6      	; 0xda <keypad_read+0x36>
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	80 67       	ori	r24, 0x70	; 112
  d8:	88 bb       	out	0x18, r24	; 24
		
		if (GETBIT(PIND,2)==0) return keypad_matrix[0+i*4];
  da:	80 b3       	in	r24, 0x10	; 16
  dc:	82 fd       	sbrc	r24, 2
  de:	09 c0       	rjmp	.+18     	; 0xf2 <keypad_read+0x4e>
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	e0 5a       	subi	r30, 0xA0	; 160
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	80 81       	ld	r24, Z
  f0:	08 95       	ret
		if (GETBIT(PIND,3)==0) return keypad_matrix[1+i*4];
  f2:	80 b3       	in	r24, 0x10	; 16
  f4:	83 fd       	sbrc	r24, 3
  f6:	09 c0       	rjmp	.+18     	; 0x10a <keypad_read+0x66>
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	e0 5a       	subi	r30, 0xA0	; 160
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	81 81       	ldd	r24, Z+1	; 0x01
 108:	08 95       	ret
		if (GETBIT(PIND,4)==0) return keypad_matrix[2+i*4];
 10a:	80 b3       	in	r24, 0x10	; 16
 10c:	84 fd       	sbrc	r24, 4
 10e:	09 c0       	rjmp	.+18     	; 0x122 <keypad_read+0x7e>
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e0 5a       	subi	r30, 0xA0	; 160
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	82 81       	ldd	r24, Z+2	; 0x02
 120:	08 95       	ret
		if (GETBIT(PIND,5)==0) return keypad_matrix[3+i*4];
 122:	80 b3       	in	r24, 0x10	; 16
 124:	85 fd       	sbrc	r24, 5
 126:	09 c0       	rjmp	.+18     	; 0x13a <keypad_read+0x96>
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e0 5a       	subi	r30, 0xA0	; 160
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	83 81       	ldd	r24, Z+3	; 0x03
 138:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e3       	ldi	r24, 0x3F	; 63
 13c:	9c e9       	ldi	r25, 0x9C	; 156
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <keypad_read+0x9a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <keypad_read+0xa0>
 144:	00 00       	nop
	
}

int8_t keypad_read(){
	
	for (uint8_t i=0; i<4 ; i++)
 146:	ef 5f       	subi	r30, 0xFF	; 255
 148:	e4 30       	cpi	r30, 0x04	; 4
 14a:	09 f0       	breq	.+2      	; 0x14e <keypad_read+0xaa>
 14c:	ac cf       	rjmp	.-168    	; 0xa6 <keypad_read+0x2>
		if (GETBIT(PIND,3)==0) return keypad_matrix[1+i*4];
		if (GETBIT(PIND,4)==0) return keypad_matrix[2+i*4];
		if (GETBIT(PIND,5)==0) return keypad_matrix[3+i*4];
		_delay_ms(10);
	}	
	return -1;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
}
 150:	08 95       	ret

00000152 <LCD_write_command>:
	_delay_ms(20);
	 	
}

void LCD_write_command(uint8_t cmd){ // 0x20 // 0b0010 0000
RS(0);
 152:	d9 98       	cbi	0x1b, 1	; 27
// send most byte
D4(GETBIT(cmd,4));
 154:	84 ff       	sbrs	r24, 4
 156:	02 c0       	rjmp	.+4      	; 0x15c <LCD_write_command+0xa>
 158:	db 9a       	sbi	0x1b, 3	; 27
 15a:	01 c0       	rjmp	.+2      	; 0x15e <LCD_write_command+0xc>
 15c:	db 98       	cbi	0x1b, 3	; 27
D5(GETBIT(cmd,5));
 15e:	85 ff       	sbrs	r24, 5
 160:	02 c0       	rjmp	.+4      	; 0x166 <LCD_write_command+0x14>
 162:	dc 9a       	sbi	0x1b, 4	; 27
 164:	01 c0       	rjmp	.+2      	; 0x168 <LCD_write_command+0x16>
 166:	dc 98       	cbi	0x1b, 4	; 27
D6(GETBIT(cmd,6));
 168:	86 ff       	sbrs	r24, 6
 16a:	02 c0       	rjmp	.+4      	; 0x170 <LCD_write_command+0x1e>
 16c:	dd 9a       	sbi	0x1b, 5	; 27
 16e:	01 c0       	rjmp	.+2      	; 0x172 <LCD_write_command+0x20>
 170:	dd 98       	cbi	0x1b, 5	; 27
D7(GETBIT(cmd,7));
 172:	88 23       	and	r24, r24
 174:	14 f4       	brge	.+4      	; 0x17a <LCD_write_command+0x28>
 176:	de 9a       	sbi	0x1b, 6	; 27
 178:	01 c0       	rjmp	.+2      	; 0x17c <LCD_write_command+0x2a>
 17a:	de 98       	cbi	0x1b, 6	; 27
EN(1);
 17c:	da 9a       	sbi	0x1b, 2	; 27
 17e:	ef e9       	ldi	r30, 0x9F	; 159
 180:	ff e0       	ldi	r31, 0x0F	; 15
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_write_command+0x30>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_write_command+0x36>
 188:	00 00       	nop
_delay_ms(1);
EN(0);
 18a:	da 98       	cbi	0x1b, 2	; 27
 18c:	ef e9       	ldi	r30, 0x9F	; 159
 18e:	ff e0       	ldi	r31, 0x0F	; 15
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_write_command+0x3e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_write_command+0x44>
 196:	00 00       	nop
_delay_ms(1);

// send least byte

D4(GETBIT(cmd,0));
 198:	80 ff       	sbrs	r24, 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <LCD_write_command+0x4e>
 19c:	db 9a       	sbi	0x1b, 3	; 27
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <LCD_write_command+0x50>
 1a0:	db 98       	cbi	0x1b, 3	; 27
D5(GETBIT(cmd,1));
 1a2:	81 ff       	sbrs	r24, 1
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <LCD_write_command+0x58>
 1a6:	dc 9a       	sbi	0x1b, 4	; 27
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <LCD_write_command+0x5a>
 1aa:	dc 98       	cbi	0x1b, 4	; 27
D6(GETBIT(cmd,2));
 1ac:	82 ff       	sbrs	r24, 2
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <LCD_write_command+0x62>
 1b0:	dd 9a       	sbi	0x1b, 5	; 27
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <LCD_write_command+0x64>
 1b4:	dd 98       	cbi	0x1b, 5	; 27
D7(GETBIT(cmd,3));
 1b6:	83 ff       	sbrs	r24, 3
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <LCD_write_command+0x6c>
 1ba:	de 9a       	sbi	0x1b, 6	; 27
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <LCD_write_command+0x6e>
 1be:	de 98       	cbi	0x1b, 6	; 27
EN(1);
 1c0:	da 9a       	sbi	0x1b, 2	; 27
 1c2:	8f e9       	ldi	r24, 0x9F	; 159
 1c4:	9f e0       	ldi	r25, 0x0F	; 15
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_write_command+0x74>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LCD_write_command+0x7a>
 1cc:	00 00       	nop
_delay_ms(1);
EN(0);
 1ce:	da 98       	cbi	0x1b, 2	; 27
 1d0:	ef e9       	ldi	r30, 0x9F	; 159
 1d2:	ff e0       	ldi	r31, 0x0F	; 15
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_write_command+0x82>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_write_command+0x88>
 1da:	00 00       	nop
_delay_ms(1);
}
 1dc:	08 95       	ret

000001de <LCD_write_char>:

void LCD_write_char(uint8_t data){
	 RS(1);
 1de:	d9 9a       	sbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(data,4));
 1e0:	84 ff       	sbrs	r24, 4
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <LCD_write_char+0xa>
 1e4:	db 9a       	sbi	0x1b, 3	; 27
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <LCD_write_char+0xc>
 1e8:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,5));
 1ea:	85 ff       	sbrs	r24, 5
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <LCD_write_char+0x14>
 1ee:	dc 9a       	sbi	0x1b, 4	; 27
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <LCD_write_char+0x16>
 1f2:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,6));
 1f4:	86 ff       	sbrs	r24, 6
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <LCD_write_char+0x1e>
 1f8:	dd 9a       	sbi	0x1b, 5	; 27
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <LCD_write_char+0x20>
 1fc:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,7));
 1fe:	88 23       	and	r24, r24
 200:	14 f4       	brge	.+4      	; 0x206 <LCD_write_char+0x28>
 202:	de 9a       	sbi	0x1b, 6	; 27
 204:	01 c0       	rjmp	.+2      	; 0x208 <LCD_write_char+0x2a>
 206:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 208:	da 9a       	sbi	0x1b, 2	; 27
 20a:	ef e9       	ldi	r30, 0x9F	; 159
 20c:	ff e0       	ldi	r31, 0x0F	; 15
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_write_char+0x30>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_write_char+0x36>
 214:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 216:	da 98       	cbi	0x1b, 2	; 27
 218:	ef e9       	ldi	r30, 0x9F	; 159
 21a:	ff e0       	ldi	r31, 0x0F	; 15
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_write_char+0x3e>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_write_char+0x44>
 222:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(data,0));
 224:	80 ff       	sbrs	r24, 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <LCD_write_char+0x4e>
 228:	db 9a       	sbi	0x1b, 3	; 27
 22a:	01 c0       	rjmp	.+2      	; 0x22e <LCD_write_char+0x50>
 22c:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,1));
 22e:	81 ff       	sbrs	r24, 1
 230:	02 c0       	rjmp	.+4      	; 0x236 <LCD_write_char+0x58>
 232:	dc 9a       	sbi	0x1b, 4	; 27
 234:	01 c0       	rjmp	.+2      	; 0x238 <LCD_write_char+0x5a>
 236:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,2));
 238:	82 ff       	sbrs	r24, 2
 23a:	02 c0       	rjmp	.+4      	; 0x240 <LCD_write_char+0x62>
 23c:	dd 9a       	sbi	0x1b, 5	; 27
 23e:	01 c0       	rjmp	.+2      	; 0x242 <LCD_write_char+0x64>
 240:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,3));
 242:	83 ff       	sbrs	r24, 3
 244:	02 c0       	rjmp	.+4      	; 0x24a <LCD_write_char+0x6c>
 246:	de 9a       	sbi	0x1b, 6	; 27
 248:	01 c0       	rjmp	.+2      	; 0x24c <LCD_write_char+0x6e>
 24a:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 24c:	da 9a       	sbi	0x1b, 2	; 27
 24e:	8f e9       	ldi	r24, 0x9F	; 159
 250:	9f e0       	ldi	r25, 0x0F	; 15
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <LCD_write_char+0x74>
 256:	00 c0       	rjmp	.+0      	; 0x258 <LCD_write_char+0x7a>
 258:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 25a:	da 98       	cbi	0x1b, 2	; 27
 25c:	ef e9       	ldi	r30, 0x9F	; 159
 25e:	ff e0       	ldi	r31, 0x0F	; 15
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_write_char+0x82>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_write_char+0x88>
 266:	00 00       	nop
	 _delay_ms(1);	 
}
 268:	08 95       	ret

0000026a <LCD_init>:
 */ 
#include "lcd.h"

void LCD_init(){

	INIT_LCD();
 26a:	8a b3       	in	r24, 0x1a	; 26
 26c:	8e 67       	ori	r24, 0x7E	; 126
 26e:	8a bb       	out	0x1a, r24	; 26
	
	LCD_write_char(0x3); 
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_char>
 276:	8f e7       	ldi	r24, 0x7F	; 127
 278:	9e e3       	ldi	r25, 0x3E	; 62
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_init+0x10>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_init+0x16>
 280:	00 00       	nop
	_delay_ms(4);
	LCD_write_char(0x3);
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_char>
 288:	af e7       	ldi	r26, 0x7F	; 127
 28a:	be e3       	ldi	r27, 0x3E	; 62
 28c:	11 97       	sbiw	r26, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_init+0x22>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_init+0x28>
 292:	00 00       	nop
	_delay_ms(4);
	LCD_write_char(0x3);
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_char>
 29a:	8f e7       	ldi	r24, 0x7F	; 127
 29c:	9e e3       	ldi	r25, 0x3E	; 62
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_init+0x34>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_init+0x3a>
 2a4:	00 00       	nop
	_delay_ms(4);
	
	LCD_write_command(0x2);  // enable 4 bit mode 
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_write_command>
	LCD_write_command(0x28);
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_write_command>
	LCD_write_command(0x08);
 2b2:	88 e0       	ldi	r24, 0x08	; 8
 2b4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_write_command>
	LCD_write_command(0x01); //clear lcd 
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_write_command>
	LCD_write_command(0x06); // make curser increment to right
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_write_command>
	LCD_write_command(0xc);
 2c4:	8c e0       	ldi	r24, 0x0C	; 12
 2c6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_write_command>
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	99 ef       	ldi	r25, 0xF9	; 249
 2ce:	a0 e0       	ldi	r26, 0x00	; 0
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	a0 40       	sbci	r26, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <LCD_init+0x66>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_init+0x70>
 2da:	00 00       	nop
	_delay_ms(20);
	 	
}
 2dc:	08 95       	ret

000002de <LCD_write_string>:
	 EN(0);
	 _delay_ms(1);	 
}


void LCD_write_string(uint8_t txt[]){
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; txt[i] != '\0'; i++){
 2e6:	fc 01       	movw	r30, r24
 2e8:	80 81       	ld	r24, Z
 2ea:	88 23       	and	r24, r24
 2ec:	51 f0       	breq	.+20     	; 0x302 <LCD_write_string+0x24>
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_char(txt[i]);
 2f0:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_char>
	 _delay_ms(1);	 
}


void LCD_write_string(uint8_t txt[]){
	for(uint8_t i = 0; txt[i] != '\0'; i++){
 2f4:	cf 5f       	subi	r28, 0xFF	; 255
 2f6:	f8 01       	movw	r30, r16
 2f8:	ec 0f       	add	r30, r28
 2fa:	f1 1d       	adc	r31, r1
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	b9 f7       	brne	.-18     	; 0x2f0 <LCD_write_string+0x12>
		LCD_write_char(txt[i]);
	}
}
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	08 95       	ret

0000030a <LCD_write_num>:

void LCD_write_num(uint32_t num){
 30a:	8f 92       	push	r8
 30c:	9f 92       	push	r9
 30e:	af 92       	push	r10
 310:	bf 92       	push	r11
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	2a 97       	sbiw	r28, 0x0a	; 10
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	dc 01       	movw	r26, r24
 32e:	cb 01       	movw	r24, r22
uint8_t txt[10] = {0};
 330:	ae 01       	movw	r20, r28
 332:	4f 5f       	subi	r20, 0xFF	; 255
 334:	5f 4f       	sbci	r21, 0xFF	; 255
 336:	2a e0       	ldi	r18, 0x0A	; 10
 338:	fa 01       	movw	r30, r20
 33a:	11 92       	st	Z+, r1
 33c:	2a 95       	dec	r18
 33e:	e9 f7       	brne	.-6      	; 0x33a <LCD_write_num+0x30>
int8_t i = 0;
if(num == 0) {
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	a1 05       	cpc	r26, r1
 344:	b1 05       	cpc	r27, r1
 346:	21 f4       	brne	.+8      	; 0x350 <LCD_write_num+0x46>
	LCD_write_char('0');
 348:	80 e3       	ldi	r24, 0x30	; 48
 34a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_char>
	return;
 34e:	38 c0       	rjmp	.+112    	; 0x3c0 <LCD_write_num+0xb6>
}

void LCD_write_num(uint32_t num){
uint8_t txt[10] = {0};
int8_t i = 0;
if(num == 0) {
 350:	10 e0       	ldi	r17, 0x00	; 0
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
{
	txt[i] = num%10 + 48;
 352:	0f 2e       	mov	r0, r31
 354:	fa e0       	ldi	r31, 0x0A	; 10
 356:	8f 2e       	mov	r8, r31
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	9f 2e       	mov	r9, r31
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	af 2e       	mov	r10, r31
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	bf 2e       	mov	r11, r31
 364:	f0 2d       	mov	r31, r0
 366:	e1 2e       	mov	r14, r17
 368:	ff 24       	eor	r15, r15
 36a:	e7 fc       	sbrc	r14, 7
 36c:	f0 94       	com	r15
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	2c 0f       	add	r18, r28
 374:	3d 1f       	adc	r19, r29
 376:	e2 0e       	add	r14, r18
 378:	f3 1e       	adc	r15, r19
 37a:	bc 01       	movw	r22, r24
 37c:	cd 01       	movw	r24, r26
 37e:	a5 01       	movw	r20, r10
 380:	94 01       	movw	r18, r8
 382:	0e 94 1f 04 	call	0x83e	; 0x83e <__udivmodsi4>
 386:	60 5d       	subi	r22, 0xD0	; 208
 388:	f7 01       	movw	r30, r14
 38a:	60 83       	st	Z, r22
	num = num  / 10 ;
 38c:	82 2f       	mov	r24, r18
 38e:	93 2f       	mov	r25, r19
 390:	a4 2f       	mov	r26, r20
 392:	b5 2f       	mov	r27, r21
int8_t i = 0;
if(num == 0) {
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
 394:	1f 5f       	subi	r17, 0xFF	; 255
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	a1 05       	cpc	r26, r1
 39a:	b1 05       	cpc	r27, r1
 39c:	21 f7       	brne	.-56     	; 0x366 <LCD_write_num+0x5c>
{
	txt[i] = num%10 + 48;
	num = num  / 10 ;
}
i--;
 39e:	11 50       	subi	r17, 0x01	; 1
while(i >= 0){
 3a0:	7a f0       	brmi	.+30     	; 0x3c0 <LCD_write_num+0xb6>
	LCD_write_char(txt[i]);
 3a2:	e1 2f       	mov	r30, r17
 3a4:	ff 27       	eor	r31, r31
 3a6:	e7 fd       	sbrc	r30, 7
 3a8:	f0 95       	com	r31
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	2c 0f       	add	r18, r28
 3b0:	3d 1f       	adc	r19, r29
 3b2:	e2 0f       	add	r30, r18
 3b4:	f3 1f       	adc	r31, r19
 3b6:	80 81       	ld	r24, Z
 3b8:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_char>
	i--;
 3bc:	11 50       	subi	r17, 0x01	; 1
 3be:	88 f7       	brcc	.-30     	; 0x3a2 <LCD_write_num+0x98>
}
}
 3c0:	2a 96       	adiw	r28, 0x0a	; 10
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	bf 90       	pop	r11
 3d8:	af 90       	pop	r10
 3da:	9f 90       	pop	r9
 3dc:	8f 90       	pop	r8
 3de:	08 95       	ret

000003e0 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8_t row,uint8_t col)
{
	uint8_t Address;

	/* first of all calculate the required address */
	switch(row)
 3e0:	88 23       	and	r24, r24
 3e2:	29 f0       	breq	.+10     	; 0x3ee <LCD_goToRowColumn+0xe>
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	21 f4       	brne	.+8      	; 0x3f0 <LCD_goToRowColumn+0x10>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
 3e8:	96 2f       	mov	r25, r22
 3ea:	90 5c       	subi	r25, 0xC0	; 192
				break;
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <LCD_goToRowColumn+0x10>

	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
 3ee:	96 2f       	mov	r25, r22
				Address=col+0x40;
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_write_command(Address | SET_CURSOR_LOCATION);
 3f0:	89 2f       	mov	r24, r25
 3f2:	80 68       	ori	r24, 0x80	; 128
 3f4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_write_command>
}
 3f8:	08 95       	ret

000003fa <LCD_clear>:

void LCD_clear(void)
{    LCD_write_command(0x01);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_write_command>
 400:	8f e9       	ldi	r24, 0x9F	; 159
 402:	9f e0       	ldi	r25, 0x0F	; 15
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <LCD_clear+0xa>
 408:	00 c0       	rjmp	.+0      	; 0x40a <LCD_clear+0x10>
 40a:	00 00       	nop
	 _delay_ms(1);
}
 40c:	08 95       	ret

0000040e <reading_pass_process>:
	IsLocked=0;
	
}

void reading_pass_process (uint8_t* reading_pass )
{
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	6c 01       	movw	r12, r24
	LCD_clear();
 420:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
	LCD_goToRowColumn(0,0);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
	LCD_write_string("Enter Password : ");
 430:	80 e7       	ldi	r24, 0x70	; 112
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_string>
	uint8_t pass_index =0;
 438:	ee 24       	eor	r14, r14
	while(pass_index < size)
	{
		int8_t key = keypad_read();
 43a:	0e 94 52 00 	call	0xa4	; 0xa4 <keypad_read>
 43e:	18 2f       	mov	r17, r24
		
		if (key!=-1  )
 440:	8f 3f       	cpi	r24, 0xFF	; 255
 442:	d9 f3       	breq	.-10     	; 0x43a <reading_pass_process+0x2c>
		{
			while(keypad_read()==key);
 444:	c8 2f       	mov	r28, r24
 446:	dd 27       	eor	r29, r29
 448:	c7 fd       	sbrc	r28, 7
 44a:	d0 95       	com	r29
 44c:	0e 94 52 00 	call	0xa4	; 0xa4 <keypad_read>
 450:	8c 17       	cp	r24, r28
 452:	9d 07       	cpc	r25, r29
 454:	d9 f3       	breq	.-10     	; 0x44c <reading_pass_process+0x3e>
			LCD_goToRowColumn(1,pass_index);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	6e 2d       	mov	r22, r14
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
			LCD_write_char(key);
 462:	8c 2f       	mov	r24, r28
 464:	9d 2f       	mov	r25, r29
 466:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_char>
			reading_pass[pass_index++]=key;
 46a:	f6 01       	movw	r30, r12
 46c:	ee 0d       	add	r30, r14
 46e:	f1 1d       	adc	r31, r1
 470:	10 83       	st	Z, r17
 472:	e3 94       	inc	r14
{
	LCD_clear();
	LCD_goToRowColumn(0,0);
	LCD_write_string("Enter Password : ");
	uint8_t pass_index =0;
	while(pass_index < size)
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	8e 15       	cp	r24, r14
 478:	00 f7       	brcc	.-64     	; 0x43a <reading_pass_process+0x2c>
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	93 ed       	ldi	r25, 0xD3	; 211
 47e:	a0 e3       	ldi	r26, 0x30	; 48
 480:	81 50       	subi	r24, 0x01	; 1
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	a0 40       	sbci	r26, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <reading_pass_process+0x72>
 488:	00 c0       	rjmp	.+0      	; 0x48a <reading_pass_process+0x7c>
 48a:	00 00       	nop
		}
		
	}
	
	_delay_ms(1000);
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	08 95       	ret

0000049e <IsCorrectPass>:
 */ 
#include "Locker.h"
extern IsLocked ;

void IsCorrectPass(uint8_t * saved_pass , uint8_t* reading_pass)
{   uint8_t i;
 49e:	8f 92       	push	r8
 4a0:	9f 92       	push	r9
 4a2:	af 92       	push	r10
 4a4:	bf 92       	push	r11
 4a6:	cf 92       	push	r12
 4a8:	df 92       	push	r13
 4aa:	ef 92       	push	r14
 4ac:	ff 92       	push	r15
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	d6 2e       	mov	r13, r22
 4b8:	c7 2e       	mov	r12, r23
 4ba:	e8 2e       	mov	r14, r24
 4bc:	f9 2e       	mov	r15, r25
 4be:	c6 2f       	mov	r28, r22
 4c0:	d7 2f       	mov	r29, r23
 *  Author: Ebtsam
 */ 
#include "Locker.h"
extern IsLocked ;

void IsCorrectPass(uint8_t * saved_pass , uint8_t* reading_pass)
 4c2:	8e 01       	movw	r16, r28
 4c4:	0c 5f       	subi	r16, 0xFC	; 252
 4c6:	1f 4f       	sbci	r17, 0xFF	; 255
{   uint8_t i;
	for (i=0; i<size ; i++)
	{
		if(saved_pass[i]!=reading_pass[i])
		{
			IsLocked=1;
 4c8:	aa 24       	eor	r10, r10
 4ca:	bb 24       	eor	r11, r11
 4cc:	a3 94       	inc	r10
			LCD_clear();
			LCD_goToRowColumn(0,0);
			LCD_write_string("wrong pass");
 4ce:	0f 2e       	mov	r0, r31
 4d0:	f2 e8       	ldi	r31, 0x82	; 130
 4d2:	8f 2e       	mov	r8, r31
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	9f 2e       	mov	r9, r31
 4d8:	f0 2d       	mov	r31, r0

void IsCorrectPass(uint8_t * saved_pass , uint8_t* reading_pass)
{   uint8_t i;
	for (i=0; i<size ; i++)
	{
		if(saved_pass[i]!=reading_pass[i])
 4da:	d7 01       	movw	r26, r14
 4dc:	9d 91       	ld	r25, X+
 4de:	7d 01       	movw	r14, r26
 4e0:	89 91       	ld	r24, Y+
 4e2:	98 17       	cp	r25, r24
 4e4:	e1 f0       	breq	.+56     	; 0x51e <IsCorrectPass+0x80>
		{
			IsLocked=1;
 4e6:	b0 92 eb 00 	sts	0x00EB, r11
 4ea:	a0 92 ea 00 	sts	0x00EA, r10
			LCD_clear();
 4ee:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
			LCD_goToRowColumn(0,0);
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
			LCD_write_string("wrong pass");
 4fe:	c4 01       	movw	r24, r8
 500:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_string>
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	93 ed       	ldi	r25, 0xD3	; 211
 508:	a0 e3       	ldi	r26, 0x30	; 48
 50a:	81 50       	subi	r24, 0x01	; 1
 50c:	90 40       	sbci	r25, 0x00	; 0
 50e:	a0 40       	sbci	r26, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <IsCorrectPass+0x6c>
 512:	00 c0       	rjmp	.+0      	; 0x514 <IsCorrectPass+0x76>
 514:	00 00       	nop
			_delay_ms(1000);
			reading_pass_process(reading_pass);
 516:	8d 2d       	mov	r24, r13
 518:	9c 2d       	mov	r25, r12
 51a:	0e 94 07 02 	call	0x40e	; 0x40e <reading_pass_process>
#include "Locker.h"
extern IsLocked ;

void IsCorrectPass(uint8_t * saved_pass , uint8_t* reading_pass)
{   uint8_t i;
	for (i=0; i<size ; i++)
 51e:	c0 17       	cp	r28, r16
 520:	d1 07       	cpc	r29, r17
 522:	d9 f6       	brne	.-74     	; 0x4da <IsCorrectPass+0x3c>
			reading_pass_process(reading_pass);

		}
	}
	
	LCD_clear();
 524:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
	LCD_goToRowColumn(0,0);
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
	LCD_write_string("Right pass");
 534:	8d e8       	ldi	r24, 0x8D	; 141
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_string>
 53c:	8f ef       	ldi	r24, 0xFF	; 255
 53e:	93 ed       	ldi	r25, 0xD3	; 211
 540:	a0 e3       	ldi	r26, 0x30	; 48
 542:	81 50       	subi	r24, 0x01	; 1
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	a0 40       	sbci	r26, 0x00	; 0
 548:	e1 f7       	brne	.-8      	; 0x542 <IsCorrectPass+0xa4>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <IsCorrectPass+0xae>
 54c:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
 54e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
	IsLocked=0;
 552:	10 92 eb 00 	sts	0x00EB, r1
 556:	10 92 ea 00 	sts	0x00EA, r1
	
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
 56a:	bf 90       	pop	r11
 56c:	af 90       	pop	r10
 56e:	9f 90       	pop	r9
 570:	8f 90       	pop	r8
 572:	08 95       	ret

00000574 <change_pass>:
	
	_delay_ms(1000);
}

void change_pass(uint8_t * new_pass)
{
 574:	cf 92       	push	r12
 576:	df 92       	push	r13
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	6c 01       	movw	r12, r24
	LCD_clear();
 586:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
	LCD_goToRowColumn(0,0);
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
	LCD_write_string("Change Pass: ");
 596:	88 e9       	ldi	r24, 0x98	; 152
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_string>
	uint8_t pass_index =0;
 59e:	ee 24       	eor	r14, r14
	while(pass_index < size){
		int8_t key = keypad_read();
 5a0:	0e 94 52 00 	call	0xa4	; 0xa4 <keypad_read>
 5a4:	18 2f       	mov	r17, r24
		if(key!=-1 )
 5a6:	8f 3f       	cpi	r24, 0xFF	; 255
 5a8:	d9 f3       	breq	.-10     	; 0x5a0 <change_pass+0x2c>
		{
			while(keypad_read()==key);
 5aa:	c8 2f       	mov	r28, r24
 5ac:	dd 27       	eor	r29, r29
 5ae:	c7 fd       	sbrc	r28, 7
 5b0:	d0 95       	com	r29
 5b2:	0e 94 52 00 	call	0xa4	; 0xa4 <keypad_read>
 5b6:	8c 17       	cp	r24, r28
 5b8:	9d 07       	cpc	r25, r29
 5ba:	d9 f3       	breq	.-10     	; 0x5b2 <change_pass+0x3e>
			
			LCD_goToRowColumn(1,pass_index);
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	6e 2d       	mov	r22, r14
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
			LCD_write_char(key);
 5c8:	8c 2f       	mov	r24, r28
 5ca:	9d 2f       	mov	r25, r29
 5cc:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_char>
			
			new_pass[pass_index++]=key;
 5d0:	f6 01       	movw	r30, r12
 5d2:	ee 0d       	add	r30, r14
 5d4:	f1 1d       	adc	r31, r1
 5d6:	10 83       	st	Z, r17
 5d8:	e3 94       	inc	r14
{
	LCD_clear();
	LCD_goToRowColumn(0,0);
	LCD_write_string("Change Pass: ");
	uint8_t pass_index =0;
	while(pass_index < size){
 5da:	83 e0       	ldi	r24, 0x03	; 3
 5dc:	8e 15       	cp	r24, r14
 5de:	00 f7       	brcc	.-64     	; 0x5a0 <change_pass+0x2c>
		}
	}
	
	
	
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	df 90       	pop	r13
 5ee:	cf 90       	pop	r12
 5f0:	08 95       	ret

000005f2 <save_new_pass>:
void save_new_pass(uint8_t* saved_pass ,uint8_t* new_pass )
{
 5f2:	a6 2f       	mov	r26, r22
 5f4:	b7 2f       	mov	r27, r23
 5f6:	e8 2f       	mov	r30, r24
 5f8:	f9 2f       	mov	r31, r25
 5fa:	84 e0       	ldi	r24, 0x04	; 4
	uint8_t i ;
	
	for (i=0; i<size ; i++)
	{
		saved_pass[i]=new_pass[i];
 5fc:	9d 91       	ld	r25, X+
 5fe:	91 93       	st	Z+, r25
 600:	81 50       	subi	r24, 0x01	; 1
}
void save_new_pass(uint8_t* saved_pass ,uint8_t* new_pass )
{
	uint8_t i ;
	
	for (i=0; i<size ; i++)
 602:	e1 f7       	brne	.-8      	; 0x5fc <save_new_pass+0xa>
	{
		saved_pass[i]=new_pass[i];
	}
	
}
 604:	08 95       	ret

00000606 <check_newPass>:

uint8_t check_newPass (uint8_t* saved_pass ,uint8_t* new_pass ) // check if a new pass has been entered or not
{   uint8_t i ;
 606:	fb 01       	movw	r30, r22
	for (i=0; i<size ; i++)
	{
		if(saved_pass[i]!=new_pass[i])
 608:	dc 01       	movw	r26, r24
 60a:	3c 91       	ld	r19, X
 60c:	20 81       	ld	r18, Z
 60e:	32 17       	cp	r19, r18
 610:	51 f4       	brne	.+20     	; 0x626 <check_newPass+0x20>
		saved_pass[i]=new_pass[i];
	}
	
}

uint8_t check_newPass (uint8_t* saved_pass ,uint8_t* new_pass ) // check if a new pass has been entered or not
 612:	11 96       	adiw	r26, 0x01	; 1
 614:	31 96       	adiw	r30, 0x01	; 1
 616:	83 e0       	ldi	r24, 0x03	; 3
{   uint8_t i ;
	for (i=0; i<size ; i++)
	{
		if(saved_pass[i]!=new_pass[i])
 618:	2d 91       	ld	r18, X+
 61a:	91 91       	ld	r25, Z+
 61c:	29 17       	cp	r18, r25
 61e:	29 f4       	brne	.+10     	; 0x62a <check_newPass+0x24>
 620:	81 50       	subi	r24, 0x01	; 1
	
}

uint8_t check_newPass (uint8_t* saved_pass ,uint8_t* new_pass ) // check if a new pass has been entered or not
{   uint8_t i ;
	for (i=0; i<size ; i++)
 622:	d1 f7       	brne	.-12     	; 0x618 <check_newPass+0x12>
 624:	08 95       	ret
	{
		if(saved_pass[i]!=new_pass[i])
		return 1;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	08 95       	ret
 62a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 62c:	08 95       	ret

0000062e <main>:

#include "Locker.h"
uint8_t IsLocked=1;

int main(void)
{ 
 62e:	2f 92       	push	r2
 630:	3f 92       	push	r3
 632:	4f 92       	push	r4
 634:	5f 92       	push	r5
 636:	7f 92       	push	r7
 638:	8f 92       	push	r8
 63a:	9f 92       	push	r9
 63c:	af 92       	push	r10
 63e:	bf 92       	push	r11
 640:	cf 92       	push	r12
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
 654:	2c 97       	sbiw	r28, 0x0c	; 12
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
   LCD_init(); 
 660:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_init>
   keypad_init(); 
 664:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
   
   SETBIT(DDRC ,Led);
 668:	a0 9a       	sbi	0x14, 0	; 20
   SETBIT(DDRC ,Relay);
 66a:	a4 9a       	sbi	0x14, 4	; 20
   CLRBIT(PORTC,Led);
 66c:	a8 98       	cbi	0x15, 0	; 21
   CLRBIT(PORTC,Relay);
 66e:	ac 98       	cbi	0x15, 4	; 21
   
   
   
   uint8_t saved_pass[size] = {'0','0','0','0'};
 670:	80 e3       	ldi	r24, 0x30	; 48
 672:	89 83       	std	Y+1, r24	; 0x01
 674:	8a 83       	std	Y+2, r24	; 0x02
 676:	8b 83       	std	Y+3, r24	; 0x03
 678:	8c 83       	std	Y+4, r24	; 0x04
   uint8_t reading_pass[size];
   uint8_t new_pass[size]={'0','0','0','0'};
 67a:	89 87       	std	Y+9, r24	; 0x09
 67c:	8a 87       	std	Y+10, r24	; 0x0a
 67e:	8b 87       	std	Y+11, r24	; 0x0b
 680:	8c 87       	std	Y+12, r24	; 0x0c
   
   reading_pass_process(reading_pass);
 682:	ce 01       	movw	r24, r28
 684:	05 96       	adiw	r24, 0x05	; 5
 686:	0e 94 07 02 	call	0x40e	; 0x40e <reading_pass_process>
   
   
   IsCorrectPass(saved_pass,reading_pass);
 68a:	ce 01       	movw	r24, r28
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	be 01       	movw	r22, r28
 690:	6b 5f       	subi	r22, 0xFB	; 251
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	0e 94 4f 02 	call	0x49e	; 0x49e <IsCorrectPass>
					LCD_write_string("new pass saved");
					}
					else {
						LCD_clear();
						LCD_goToRowColumn(0,0);
						LCD_write_string("set newPass first");
 698:	0f 2e       	mov	r0, r31
 69a:	ff ec       	ldi	r31, 0xCF	; 207
 69c:	4f 2e       	mov	r4, r31
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	5f 2e       	mov	r5, r31
 6a2:	f0 2d       	mov	r31, r0
			        if(check_newPass(saved_pass, new_pass))
					{
			        save_new_pass(saved_pass,new_pass);
					LCD_clear();
					LCD_goToRowColumn(0,0);
					LCD_write_string("new pass saved");
 6a4:	0f 2e       	mov	r0, r31
 6a6:	f0 ec       	ldi	r31, 0xC0	; 192
 6a8:	2f 2e       	mov	r2, r31
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	3f 2e       	mov	r3, r31
 6ae:	f0 2d       	mov	r31, r0
					
			   case '6':
			        CLRBIT(PORTC,Relay);
			        LCD_clear();
					LCD_goToRowColumn(0,0);
					LCD_write_string("Locked !");
 6b0:	0f 2e       	mov	r0, r31
 6b2:	f1 ee       	ldi	r31, 0xE1	; 225
 6b4:	cf 2e       	mov	r12, r31
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	df 2e       	mov	r13, r31
 6ba:	f0 2d       	mov	r31, r0
		   switch (key)
		   {
			   case '1':
			        LCD_clear();
					LCD_goToRowColumn(0,0); 
					LCD_write_string("1 is pressed");
 6bc:	0f 2e       	mov	r0, r31
 6be:	f6 ea       	ldi	r31, 0xA6	; 166
 6c0:	af 2e       	mov	r10, r31
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	bf 2e       	mov	r11, r31
 6c6:	f0 2d       	mov	r31, r0
					TOGBIT(PORTC,Led);
 6c8:	ee 24       	eor	r14, r14
 6ca:	e3 94       	inc	r14
					break;
				
			   case '2':
					LCD_clear();
					LCD_goToRowColumn(0,0);
				    LCD_write_string("2 is pressed");
 6cc:	0f 2e       	mov	r0, r31
 6ce:	f3 eb       	ldi	r31, 0xB3	; 179
 6d0:	8f 2e       	mov	r8, r31
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	9f 2e       	mov	r9, r31
 6d6:	f0 2d       	mov	r31, r0
					TOGBIT(PORTC,Relay);
 6d8:	77 24       	eor	r7, r7
 6da:	68 94       	set
 6dc:	74 f8       	bld	r7, 4
   
   
   IsCorrectPass(saved_pass,reading_pass);
  
 
    while(!IsLocked)
 6de:	90 c0       	rjmp	.+288    	; 0x800 <main+0x1d2>
    {  
	   
       int8_t key = keypad_read();
 6e0:	0e 94 52 00 	call	0xa4	; 0xa4 <keypad_read>
 6e4:	f8 2e       	mov	r15, r24
	   if(key!=-1)
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	f8 16       	cp	r15, r24
 6ea:	09 f4       	brne	.+2      	; 0x6ee <main+0xc0>
 6ec:	89 c0       	rjmp	.+274    	; 0x800 <main+0x1d2>
	   {
		   while(keypad_read()==key);
 6ee:	0f 2d       	mov	r16, r15
 6f0:	11 27       	eor	r17, r17
 6f2:	07 fd       	sbrc	r16, 7
 6f4:	10 95       	com	r17
 6f6:	0e 94 52 00 	call	0xa4	; 0xa4 <keypad_read>
 6fa:	80 17       	cp	r24, r16
 6fc:	91 07       	cpc	r25, r17
 6fe:	d9 f3       	breq	.-10     	; 0x6f6 <main+0xc8>
		   switch (key)
 700:	93 e3       	ldi	r25, 0x33	; 51
 702:	f9 16       	cp	r15, r25
 704:	81 f1       	breq	.+96     	; 0x766 <main+0x138>
 706:	9f 15       	cp	r25, r15
 708:	44 f0       	brlt	.+16     	; 0x71a <main+0xec>
 70a:	a1 e3       	ldi	r26, 0x31	; 49
 70c:	fa 16       	cp	r15, r26
 70e:	69 f0       	breq	.+26     	; 0x72a <main+0xfc>
 710:	b2 e3       	ldi	r27, 0x32	; 50
 712:	fb 16       	cp	r15, r27
 714:	09 f0       	breq	.+2      	; 0x718 <main+0xea>
 716:	74 c0       	rjmp	.+232    	; 0x800 <main+0x1d2>
 718:	17 c0       	rjmp	.+46     	; 0x748 <main+0x11a>
 71a:	84 e3       	ldi	r24, 0x34	; 52
 71c:	f8 16       	cp	r15, r24
 71e:	41 f1       	breq	.+80     	; 0x770 <main+0x142>
 720:	96 e3       	ldi	r25, 0x36	; 54
 722:	f9 16       	cp	r15, r25
 724:	09 f0       	breq	.+2      	; 0x728 <main+0xfa>
 726:	6c c0       	rjmp	.+216    	; 0x800 <main+0x1d2>
 728:	4b c0       	rjmp	.+150    	; 0x7c0 <main+0x192>
		   {
			   case '1':
			        LCD_clear();
 72a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
					LCD_goToRowColumn(0,0); 
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
					LCD_write_string("1 is pressed");
 73a:	c5 01       	movw	r24, r10
 73c:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_string>
					TOGBIT(PORTC,Led);
 740:	85 b3       	in	r24, 0x15	; 21
 742:	8e 25       	eor	r24, r14
 744:	85 bb       	out	0x15, r24	; 21
					break;
 746:	5c c0       	rjmp	.+184    	; 0x800 <main+0x1d2>
				
			   case '2':
					LCD_clear();
 748:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
					LCD_goToRowColumn(0,0);
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
				    LCD_write_string("2 is pressed");
 758:	c4 01       	movw	r24, r8
 75a:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_string>
					TOGBIT(PORTC,Relay);
 75e:	85 b3       	in	r24, 0x15	; 21
 760:	87 25       	eor	r24, r7
 762:	85 bb       	out	0x15, r24	; 21
					break;
 764:	4d c0       	rjmp	.+154    	; 0x800 <main+0x1d2>
					
			   case '3' :
			        change_pass(new_pass) ;
 766:	ce 01       	movw	r24, r28
 768:	09 96       	adiw	r24, 0x09	; 9
 76a:	0e 94 ba 02 	call	0x574	; 0x574 <change_pass>
					break;
 76e:	48 c0       	rjmp	.+144    	; 0x800 <main+0x1d2>
					
			   case '4':
			        if(check_newPass(saved_pass, new_pass))
 770:	ce 01       	movw	r24, r28
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	be 01       	movw	r22, r28
 776:	67 5f       	subi	r22, 0xF7	; 247
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	0e 94 03 03 	call	0x606	; 0x606 <check_newPass>
 77e:	88 23       	and	r24, r24
 780:	99 f0       	breq	.+38     	; 0x7a8 <main+0x17a>
					{
			        save_new_pass(saved_pass,new_pass);
 782:	ce 01       	movw	r24, r28
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	be 01       	movw	r22, r28
 788:	67 5f       	subi	r22, 0xF7	; 247
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <save_new_pass>
					LCD_clear();
 790:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
					LCD_goToRowColumn(0,0);
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
					LCD_write_string("new pass saved");
 7a0:	c1 01       	movw	r24, r2
 7a2:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_string>
 7a6:	2c c0       	rjmp	.+88     	; 0x800 <main+0x1d2>
					}
					else {
						LCD_clear();
 7a8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
						LCD_goToRowColumn(0,0);
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
						LCD_write_string("set newPass first");
 7b8:	c2 01       	movw	r24, r4
 7ba:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_string>
 7be:	20 c0       	rjmp	.+64     	; 0x800 <main+0x1d2>
					}
					
					break;
					
			   case '6':
			        CLRBIT(PORTC,Relay);
 7c0:	ac 98       	cbi	0x15, 4	; 21
			        LCD_clear();
 7c2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear>
					LCD_goToRowColumn(0,0);
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_goToRowColumn>
					LCD_write_string("Locked !");
 7d2:	c6 01       	movw	r24, r12
 7d4:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_write_string>
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	93 ed       	ldi	r25, 0xD3	; 211
 7dc:	a0 e3       	ldi	r26, 0x30	; 48
 7de:	81 50       	subi	r24, 0x01	; 1
 7e0:	90 40       	sbci	r25, 0x00	; 0
 7e2:	a0 40       	sbci	r26, 0x00	; 0
 7e4:	e1 f7       	brne	.-8      	; 0x7de <main+0x1b0>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <main+0x1ba>
 7e8:	00 00       	nop
					_delay_ms(1000);
					
					reading_pass_process(reading_pass);
 7ea:	ce 01       	movw	r24, r28
 7ec:	05 96       	adiw	r24, 0x05	; 5
 7ee:	0e 94 07 02 	call	0x40e	; 0x40e <reading_pass_process>
					IsCorrectPass(saved_pass,reading_pass);
 7f2:	ce 01       	movw	r24, r28
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	be 01       	movw	r22, r28
 7f8:	6b 5f       	subi	r22, 0xFB	; 251
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	0e 94 4f 02 	call	0x49e	; 0x49e <IsCorrectPass>
   
   
   IsCorrectPass(saved_pass,reading_pass);
  
 
    while(!IsLocked)
 800:	80 91 ea 00 	lds	r24, 0x00EA
 804:	88 23       	and	r24, r24
 806:	09 f4       	brne	.+2      	; 0x80a <main+0x1dc>
 808:	6b cf       	rjmp	.-298    	; 0x6e0 <main+0xb2>
		   }
	   }
	   
		
    }
}
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	2c 96       	adiw	r28, 0x0c	; 12
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	f8 94       	cli
 814:	de bf       	out	0x3e, r29	; 62
 816:	0f be       	out	0x3f, r0	; 63
 818:	cd bf       	out	0x3d, r28	; 61
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	1f 91       	pop	r17
 820:	0f 91       	pop	r16
 822:	ff 90       	pop	r15
 824:	ef 90       	pop	r14
 826:	df 90       	pop	r13
 828:	cf 90       	pop	r12
 82a:	bf 90       	pop	r11
 82c:	af 90       	pop	r10
 82e:	9f 90       	pop	r9
 830:	8f 90       	pop	r8
 832:	7f 90       	pop	r7
 834:	5f 90       	pop	r5
 836:	4f 90       	pop	r4
 838:	3f 90       	pop	r3
 83a:	2f 90       	pop	r2
 83c:	08 95       	ret

0000083e <__udivmodsi4>:
 83e:	a1 e2       	ldi	r26, 0x21	; 33
 840:	1a 2e       	mov	r1, r26
 842:	aa 1b       	sub	r26, r26
 844:	bb 1b       	sub	r27, r27
 846:	fd 01       	movw	r30, r26
 848:	0d c0       	rjmp	.+26     	; 0x864 <__udivmodsi4_ep>

0000084a <__udivmodsi4_loop>:
 84a:	aa 1f       	adc	r26, r26
 84c:	bb 1f       	adc	r27, r27
 84e:	ee 1f       	adc	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	a2 17       	cp	r26, r18
 854:	b3 07       	cpc	r27, r19
 856:	e4 07       	cpc	r30, r20
 858:	f5 07       	cpc	r31, r21
 85a:	20 f0       	brcs	.+8      	; 0x864 <__udivmodsi4_ep>
 85c:	a2 1b       	sub	r26, r18
 85e:	b3 0b       	sbc	r27, r19
 860:	e4 0b       	sbc	r30, r20
 862:	f5 0b       	sbc	r31, r21

00000864 <__udivmodsi4_ep>:
 864:	66 1f       	adc	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	1a 94       	dec	r1
 86e:	69 f7       	brne	.-38     	; 0x84a <__udivmodsi4_loop>
 870:	60 95       	com	r22
 872:	70 95       	com	r23
 874:	80 95       	com	r24
 876:	90 95       	com	r25
 878:	9b 01       	movw	r18, r22
 87a:	ac 01       	movw	r20, r24
 87c:	bd 01       	movw	r22, r26
 87e:	cf 01       	movw	r24, r30
 880:	08 95       	ret

00000882 <_exit>:
 882:	f8 94       	cli

00000884 <__stop_program>:
 884:	ff cf       	rjmp	.-2      	; 0x884 <__stop_program>
